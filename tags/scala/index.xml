<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scala on Whisperd</title><link>https://kaichaosun.github.io/tags/scala/</link><description>Recent content in Scala on Whisperd</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 17 Jan 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://kaichaosun.github.io/tags/scala/index.xml" rel="self" type="application/rss+xml"/><item><title>Dependency Injection in Scala</title><link>https://kaichaosun.github.io/post/dependency_injection_in_scala/</link><pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate><guid>https://kaichaosun.github.io/post/dependency_injection_in_scala/</guid><description>What's Dependency Injection Dependency Injection is also known as DI for short. It is all about the way to integrate code between provider and consumer.
Usually, the provider provides functionalities that encapsulated in a function or an object. The consumer, in the opposite it needs to have a provider to do some work.
Then we say that the consumer dependent on the specific provider. There are two options that we can get this provider:</description></item><item><title>Understand Error Handling in Scala</title><link>https://kaichaosun.github.io/post/error_handling_in_scala/</link><pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate><guid>https://kaichaosun.github.io/post/error_handling_in_scala/</guid><description>What's Exception Exception are objects that defined in Java to represent error scenarios. Unhandled exceptions could terminate the program or show default message from http server.
Excpetion hirarchy Since Scala is designed to reuse Java standard or thirdparth library without much effort. It still worth to know the exception hirarachy originated in Java. It will help us deal with error scenarios.
Throwable is the root of exception hirarchy. Exception subclasses represent errors that the program can recover from.</description></item><item><title>Understand Monad in Functional Programming</title><link>https://kaichaosun.github.io/post/understand-monad/</link><pubDate>Sat, 13 Oct 2018 00:00:00 +0000</pubDate><guid>https://kaichaosun.github.io/post/understand-monad/</guid><description>Why Functional Programming? The facination of doing programming is to solve the exist problems. Revisit the history of software development, at first place we have procedure-oriented programming. As the system becomes bigger, the codebase is so hard to maintain and adding new features. Then a few genius comes out the idea with OOP with the SOLID principles to guide the daily dev work.
If there is one rule in software development, i think that must be no silver bullet.</description></item></channel></rss>